# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Tensility.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

###################################






###################################

from functions import *
# from main import *
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(650, 400)
        font = QtGui.QFont()
        font.setFamily("Myriad Pro")
        MainWindow.setFont(font)
        MainWindow.setAutoFillBackground(True)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../../../../media/sf_Z_DRIVE/favicon-1,favicon-2,favicon-3/favicon-1.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 101, 31))
        self.label.setObjectName("label")
        self.partNumberSearch = QtWidgets.QLineEdit(self.centralwidget)
        self.partNumberSearch.setGeometry(QtCore.QRect(110, 10, 111, 31))
        self.partNumberSearch.setAutoFillBackground(True)
        self.partNumberSearch.setObjectName("partNumberSearch")
        self.searchButton = QtWidgets.QPushButton(self.centralwidget)
        self.searchButton.setGeometry(QtCore.QRect(220, 10, 91, 31))
        self.searchButton.setObjectName("searchButton")
        self.searchButton.clicked.connect(self.searchClick)
        #self.searchButton.QtWidgets.QShortcut(QtCore.Qt.Key_enter, self.Begin, self.Begin.animateClick)
        self.checkboxSpec = QtWidgets.QCheckBox(self.centralwidget)
        self.checkboxSpec.setEnabled(True)
        self.checkboxSpec.setGeometry(QtCore.QRect(480, 20, 92, 23))
        self.checkboxSpec.setAcceptDrops(False)
        self.checkboxSpec.setAutoFillBackground(False)
        self.checkboxSpec.setObjectName("checkboxSpec")
        self.checkboxSpec.setChecked(True)
        # self.checkboxSpec.stateChanged.connect(self.specCheckBox)
        self.checkboxAllSpecs = QtWidgets.QCheckBox(self.centralwidget)
        self.checkboxAllSpecs.setGeometry(QtCore.QRect(480, 40, 92, 23))
        self.checkboxAllSpecs.setObjectName("checkboxAllSpecs")
        self.checkboxAllSpecs.stateChanged.connect(self.allspecCheckBox)
        self.checkboxPicture = QtWidgets.QCheckBox(self.centralwidget)
        self.checkboxPicture.setGeometry(QtCore.QRect(480, 60, 92, 23))
        self.checkboxPicture.setObjectName("checkboxPicture")
        self.checkboxWeb = QtWidgets.QCheckBox(self.centralwidget)
        self.checkboxWeb.setGeometry(QtCore.QRect(480, 80, 92, 23))
        self.checkboxWeb.setObjectName("checkboxFile")
        self.checkboxFile = QtWidgets.QCheckBox(self.centralwidget)
        self.checkboxFile.setGeometry(QtCore.QRect(480, 100, 92, 23))
        self.checkboxFile.setObjectName("checkboxFile")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(480, 0, 141, 21))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuQA = QtWidgets.QMenu(self.menubar)
        self.menuQA.setObjectName("menuQA")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionConnector = QtWidgets.QAction(MainWindow)
        self.actionConnector.setObjectName("actionConnector")
        self.actionCable_Assembly = QtWidgets.QAction(MainWindow)
        self.actionCable_Assembly.setObjectName("actionCable_Assembly")
        self.actionWire = QtWidgets.QAction(MainWindow)
        self.actionWire.setObjectName("actionWire")
        self.actionAC_Cords = QtWidgets.QAction(MainWindow)
        self.actionAC_Cords.setObjectName("actionAC_Cords")
        self.actionPower_Supply = QtWidgets.QAction(MainWindow)
        self.actionPower_Supply.setObjectName("actionPower_Supply")
        self.actionSubmit_Bug_Report = QtWidgets.QAction(MainWindow)
        self.actionSubmit_Bug_Report.setObjectName("actionSubmit_Bug_Report")
        self.menuFile.addAction(self.actionSubmit_Bug_Report)
        self.menuQA.addAction(self.actionConnector)
        self.menuQA.addAction(self.actionCable_Assembly)
        self.menuQA.addAction(self.actionWire)
        self.menuQA.addAction(self.actionPower_Supply)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuQA.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # If all Specs is checked disable spec checkbox.
    def allspecCheckBox(self, state):
        if state == QtCore.Qt.Checked:
            self.checkboxSpec.setChecked(False)
            self.checkboxSpec.setEnabled(False)
        else:
            self.checkboxSpec.setEnabled(True)

    # When the search button is clicked this function first
    # checks which checkboxes are enabled.
    def searchClick(self):
        #self.specCheckBox(state)
        specStatus = self.checkboxSpec.isChecked()
        allspecStatus = self.checkboxAllSpecs.isChecked()
        web = self.checkboxWeb.isChecked()
        picture = self.checkboxPicture.isChecked()
        basefile = self.checkboxFile.isChecked()
        partSearch = self.partNumberSearch.text()

        path = get_Path(partSearch)
        # if Checkbox All Specs is checked open spec and scan for sub part specs.
        if allspecStatus:
            extensive_Lookup(path, partSearch)
        # if checkbox spec is checked then open just the requested part spec
        if specStatus:
            #version_control(1.1)
            try:
                openPath(path)
            except(TypeError, OSError, FileNotFoundError):
                create_logs(f"TypeError {path} {datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S')}")
                print('Failed to open path')
        # if checkbox web is checked, open product page.
        if web:
            open_web(partSearch)
        # if checkbox picture is checked, open product picture.
        if picture:
            split = path.split("/")[:-2]
            path = "/".join(split)
            try:
                open_picture(path, partSearch)
            except(FileNotFoundError, TypeError, OSError):
                create_logs(f" Error loading picture from {path} (Time: {datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S')})")
        if basefile:
            subpath = "/media/sf_Z_DRIVE/Specs/"
            ppc = partSearch.split("-")
            if ppc[0] == "51":
                endppc = partSearch.split(".")[0]
                print(endppc)
                rangefolder = lookup(endppc)
                base = subpath + rangefolder +"/"+partSearch
                openPath(base)
            else:
                rangefolder = lookup(partSearch)
                base = subpath + rangefolder +'/'+partSearch
                openPath(base)




    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Tensility"))
        self.label.setText(_translate("MainWindow", "Part Number:"))
        self.searchButton.setText(_translate("MainWindow", "Search"))
        self.checkboxSpec.setText(_translate("MainWindow", "Spec"))
        self.checkboxAllSpecs.setText(_translate("MainWindow", "All Specs"))
        self.checkboxPicture.setText(_translate("MainWindow", "Picture"))
        self.checkboxWeb.setText(_translate("MainWindow", "Web"))
        self.checkboxFile.setText(_translate("MainWindow", "Root File"))
        self.label_2.setText(_translate("MainWindow", "Search Parameters"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuQA.setTitle(_translate("MainWindow", "QA"))
        self.actionConnector.setText(_translate("MainWindow", "Connector"))
        self.actionCable_Assembly.setText(_translate("MainWindow", "Cable Assembly"))
        self.actionWire.setText(_translate("MainWindow", "Wire"))
        self.actionAC_Cords.setText(_translate("MainWindow", "AC Cords"))
        self.actionPower_Supply.setText(_translate("MainWindow", "Power Supply"))
        self.actionSubmit_Bug_Report.setText(_translate("MainWindow", "Submit Bug Report"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
